-- CDVN BY RONDZ - Full (Farm Boss intact; Auto Loot removed; PvP replaced & FixLag single button)
-- Key: rondz15885
-- UI: Rayfield (white theme)
print("[CDVN BY RONDZ] Script starting...")

-- ===== Services =====
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")
local HttpService = game:GetService("HttpService")
local workspaceRef = workspace
local player = Players.LocalPlayer

-- Optional VirtualInputManager (some executors)
local VirtualInputManager = nil
pcall(function() VirtualInputManager = game:GetService("VirtualInputManager") end)

-- ===== Load Rayfield UI safely =====
local ok, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)
if not ok or not Rayfield then
    warn("[CDVN BY RONDZ] Failed to load Rayfield UI. Stopping.")
    return
end

-- ===== Window / KeySystem (theme: white bg, black text) =====
local Window = Rayfield:CreateWindow({
    Name = "üî• CDVN BY RONDZ üî•",
    LoadingTitle = "ƒêang t·∫£i...",
    LoadingSubtitle = "by RONDZ",
    ConfigurationSaving = { Enabled = true, FolderName = "CDVN_By_RONDZ", FileName = "Config" },
    KeySystem = true,
    KeySettings = {
        Title = "CDVN BY RONDZ | Key System",
        Subtitle = "Nh·∫≠p key ƒë·ªÉ ti·∫øp t·ª•c",
        FileName = "CDVNKeyConfig",
        SaveKey = false,               -- kh√¥ng l∆∞u key
        GrabKeyFromSite = false,
        Key = {"rondz15885"},
        Callback = function(correct)
            if correct then
                Rayfield:Notify({ Title = "‚úÖ Th√†nh c√¥ng", Content = "Key ƒë√∫ng! Menu ƒë√£ ƒë∆∞·ª£c m·ªü.", Duration = 3 })
            else
                Rayfield:Notify({ Title = "‚ùå Sai Key", Content = "Key sai. Vui l√≤ng th·ª≠ l·∫°i.", Duration = 3 })
            end
        end
    },
    Theme = {
        Background = Color3.fromRGB(255,255,255),
        Topbar = Color3.fromRGB(245,245,245),
        TabBackground = Color3.fromRGB(250,250,250),
        PrimaryText = Color3.fromRGB(0,0,0),
        SecondaryText = Color3.fromRGB(80,80,80),
        Accent = Color3.fromRGB(200,0,0),
        Outline = Color3.fromRGB(0,0,0)
    }
})

-- Toggle UI with V
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    if input.KeyCode == Enum.KeyCode.V then Window:Toggle() end
end)

-- ===== State / Config =====
local bossName = "Boss"
local selectedWeaponName = nil

local autoEquipAndAttack = false
local attackInterval = 0.12

local orbitEnabled = false
local orbitDistance = 12
local orbitSpeed = 2 -- multiplier

local autoHP = false
local hpThreshold = 70
local healing = false

-- Note: AutoLoot functionality removed (no autoLoot vars/logic)

-- Boss cache
local cachedBoss = nil
local cacheLastCheck = 0
local cacheInterval = 2.0

-- HP UI smoothing
local currentHPPercent = 0
local currentTweenFake = nil

-- Anti AFK
local antiAFKThread = nil
local antiAFKRunning = false

-- ===== PvP state vars (updated/fixed) =====
local autoAttack = false               -- will spam attack continuously when true
local cframeSpeedEnabled = false
local cframeSpeedValue = 30            -- default speed (for backward compatibility)
local CFWalkEnabled = false
local flyEnabled = false
local flySpeed = 50                    -- internal fly velocity multiplier
local flyBV = nil
local spinEnabled = false
local spinSpeed = 5
local orbixEnabled = false
local orbixSpeed = 5
local orbixRadius = 10

-- ===== Utilities =====
local function low(s) if not s then return "" end return tostring(s):lower() end
local function safePcall(fn, ...) local ok, a = pcall(fn, ...) if not ok then return nil, a end return a end

-- ===== Helpers =====

-- exact name finder (case-insensitive exact match) ‚Äî checks Character then Backpack
local function findExactTool(name)
    if not name then return nil, nil end
    local targetLower = tostring(name):lower()
    local char = player and player.Character
    if char then
        for _, v in ipairs(char:GetChildren()) do
            if v:IsA("Tool") and tostring(v.Name):lower() == targetLower then
                return v, "char"
            end
        end
    end
    if player and player.Backpack then
        for _, v in ipairs(player.Backpack:GetChildren()) do
            if v:IsA("Tool") and tostring(v.Name):lower() == targetLower then
                return v, "backpack"
            end
        end
    end
    return nil, nil
end

-- Find a tool by name (character first, then backpack); partial match (used for weapons dropdown)
local function findToolByName(name)
    if not name then return nil, nil end
    local target = low(name)
    local char = player and player.Character
    if char then
        for _, v in ipairs(char:GetChildren()) do
            if v:IsA("Tool") and low(v.Name):find(target, 1, true) then
                return v, "char"
            end
        end
    end
    if player and player.Backpack then
        for _, v in ipairs(player.Backpack:GetChildren()) do
            if v:IsA("Tool") and low(v.Name):find(target, 1, true) then
                return v, "backpack"
            end
        end
    end
    return nil, nil
end

-- Ensure equipped in character; tries Humanoid:EquipTool first then fallback to move parent
local function ensureEquipped(name, timeout)
    timeout = timeout or 1.0
    if not name then return nil end
    local lowerName = low(name)
    local char = player and player.Character
    if not char then return nil end
    local hum = char:FindFirstChildOfClass("Humanoid")
    -- check char first
    for _, v in ipairs(char:GetChildren()) do
        if v:IsA("Tool") and low(v.Name):find(lowerName,1,true) then
            return v
        end
    end
    -- find in backpack
    local bp = player.Backpack
    if bp then
        for _, v in ipairs(bp:GetChildren()) do
            if v:IsA("Tool") and low(v.Name):find(lowerName,1,true) then
                if hum then
                    local ok = pcall(function() hum:EquipTool(v) end)
                    if ok then
                        local start = tick()
                        while tick() - start <= timeout do
                            task.wait(0.03)
                            local t = char:FindFirstChild(v.Name)
                            if t and t:IsA("Tool") then return t end
                        end
                    end
                end
                -- fallback: move to char
                pcall(function() v.Parent = char end)
                local start2 = tick()
                while tick() - start2 <= timeout do
                    task.wait(0.03)
                    local t2 = char:FindFirstChild(v.Name)
                    if t2 and t2:IsA("Tool") then return t2 end
                end
            end
        end
    end
    return nil
end

-- Activate tool safely (with fallback virtual click)
local function safeActivate(tool)
    if not tool then return false end
    local ok = pcall(function() tool:Activate() end)
    if ok then return true end
    pcall(function()
        VirtualUser:Button1Down(Vector2.new(0,0), workspaceRef.CurrentCamera.CFrame)
        task.wait(0.03)
        VirtualUser:Button1Up(Vector2.new(0,0), workspaceRef.CurrentCamera.CFrame)
    end)
    return false
end

-- Refresh boss cache (search by name or model match)
local function refreshBossCache()
    local now = tick()
    if cachedBoss and cachedBoss.Parent and cachedBoss:FindFirstChildOfClass("Humanoid") and cachedBoss:FindFirstChild("HumanoidRootPart") then
        return cachedBoss
    end
    if now - cacheLastCheck < cacheInterval then return nil end
    cacheLastCheck = now
    -- try find by direct child
    local byName = workspaceRef:FindFirstChild(bossName)
    if byName and byName:IsA("Model") and byName:FindFirstChildOfClass("Humanoid") and byName:FindFirstChild("HumanoidRootPart") then
        cachedBoss = byName
        return cachedBoss
    end
    -- search descendants
    for _, v in pairs(workspaceRef:GetDescendants()) do
        if v:IsA("Model") and v.Name == bossName and v:FindFirstChildOfClass("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
            cachedBoss = v
            return cachedBoss
        end
    end
    cachedBoss = nil
    return nil
end

-- Tween boss HP slider (Rayfield slider :Set)
local function tweenHPTo(percent, bossHPBar)
    percent = math.clamp(percent, 0, 100)
    if currentTweenFake then pcall(function() currentTweenFake:Destroy() end) currentTweenFake = nil end
    local fake = Instance.new("NumberValue")
    fake.Value = currentHPPercent
    currentTweenFake = fake
    local ok, tween = pcall(function()
        return TweenService:Create(fake, TweenInfo.new(0.36, Enum.EasingStyle.Linear), {Value = percent})
    end)
    if ok and tween then
        fake.Changed:Connect(function(val)
            pcall(function() bossHPBar:Set(math.floor(val)) end)
        end)
        tween:Play()
        tween.Completed:Wait()
        currentHPPercent = percent
        pcall(function() fake:Destroy() end)
        currentTweenFake = nil
    else
        pcall(function() bossHPBar:Set(math.floor(percent)) end)
        currentHPPercent = percent
        pcall(function() fake:Destroy() end)
        currentTweenFake = nil
    end
end

-- ===== UI: Tabs & Controls =====
local FarmBossTab = Window:CreateTab("‚öîÔ∏è Farm Boss", 4483362458)
local FarmMoneyTab = Window:CreateTab("ü§ë Farm Ti·ªÅn", 4483362458)
local FixLagTab = Window:CreateTab("‚öôÔ∏è Fix Lag", 4483362458)
local PvPTab = Window:CreateTab("‚öîÔ∏è PvP", 4483362458)
-- Looted tab removed per request

-- ===== Farm Boss UI (as original) =====
local function getWeaponList()
    local t = {}
    if player and player.Backpack then
        for _, v in ipairs(player.Backpack:GetChildren()) do
            if v:IsA("Tool") then table.insert(t, v.Name) end
        end
    end
    if player and player.Character then
        for _, v in ipairs(player.Character:GetChildren()) do
            if v:IsA("Tool") then
                local found = false
                for _, name in ipairs(t) do if name == v.Name then found = true break end end
                if not found then table.insert(t, v.Name) end
            end
        end
    end
    table.sort(t)
    return t
end

local weaponOptions = getWeaponList()
local weaponDropdown = FarmBossTab:CreateDropdown({
    Name = "Ch·ªçn V≈© Kh√≠ (Backpack)",
    Options = weaponOptions,
    CurrentOption = weaponOptions[1] and {weaponOptions[1]} or {},
    Flag = "WeaponDropdown",
    Callback = function(option)
        if type(option) == "table" then selectedWeaponName = option[1] else selectedWeaponName = option end
    end
})

-- Refresh weapons function
local function refreshWeaponOptions()
    local list = getWeaponList()
    pcall(function()
        if weaponDropdown.Set then weaponDropdown:Set(list) end
        if weaponDropdown.UpdateOptions then weaponDropdown:UpdateOptions(list) end
        if weaponDropdown.Refresh then weaponDropdown:Refresh(list) end
    end)
    if #list > 0 and (not selectedWeaponName or selectedWeaponName == "") then selectedWeaponName = list[1] end
end

FarmBossTab:CreateButton({
    Name = "üîÑ L√†m m·ªõi danh s√°ch v≈© kh√≠",
    Callback = function()
        refreshWeaponOptions()
        Rayfield:Notify({ Title = "Refresh", Content = "Danh s√°ch v≈© kh√≠ ƒë√£ c·∫≠p nh·∫≠t.", Duration = 2 })
    end
})

-- Auto update when backpack/char changes
if player and player.Backpack then
    player.Backpack.ChildAdded:Connect(refreshWeaponOptions)
    player.Backpack.ChildRemoved:Connect(refreshWeaponOptions)
end
if player and player.Character then
    player.Character.ChildAdded:Connect(refreshWeaponOptions)
    player.Character.ChildRemoved:Connect(refreshWeaponOptions)
end
Players.PlayerAdded:Connect(function(pl)
    if pl == player then refreshWeaponOptions() end
end)

-- Boss name input
FarmBossTab:CreateInput({
    Name = "üßü T√™n Boss (ch√≠nh x√°c)",
    PlaceholderText = "VD: Boss",
    RemoveTextAfterFocusLost = false,
    Callback = function(text)
        if text and text ~= "" then bossName = text cachedBoss = nil end
    end
})

-- Toggles/inputs for Farm Boss (full features kept)
FarmBossTab:CreateToggle({ Name = "‚öî Auto Equip + Auto Attack", CurrentValue = false, Callback = function(state) autoEquipAndAttack = state end })
FarmBossTab:CreateInput({ Name = "‚è± Kho·∫£ng c√°ch gi·ªØa ƒë√≤n (gi√¢y)", PlaceholderText = "0.12", RemoveTextAfterFocusLost = false, Callback = function(txt) local n = tonumber(txt) if n and n > 0 then attackInterval = n end end })
FarmBossTab:CreateToggle({ Name = "üåÄ Quay quanh Boss (m·∫∑t ƒë·∫•t)", CurrentValue = false, Callback = function(state) orbitEnabled = state end })
FarmBossTab:CreateInput({ Name = "üìè Kho·∫£ng c√°ch Orbit (studs)", PlaceholderText = "12", RemoveTextAfterFocusLost = false, Callback = function(txt) local n = tonumber(txt) if n and n >= 0 then orbitDistance = n end end })
FarmBossTab:CreateInput({ Name = "‚ö° T·ªëc ƒë·ªô Orbit", PlaceholderText = "2", RemoveTextAfterFocusLost = false, Callback = function(txt) local n = tonumber(txt) if n and n > 0 then orbitSpeed = n end end })
FarmBossTab:CreateToggle({ Name = "‚ù§Ô∏è Auto HP (bƒÉng g·∫°c)", CurrentValue = false, Callback = function(state) autoHP = state end })
FarmBossTab:CreateInput({ Name = "Ng∆∞·ª°ng m√°u s·ª≠ d·ª•ng HP (<=)", PlaceholderText = "70", RemoveTextAfterFocusLost = false, Callback = function(txt) local n = tonumber(txt) if n then hpThreshold = n end end })
-- Auto Loot functionality removed earlier (kept removed)

local statusLabel = FarmBossTab:CreateLabel("Tr·∫°ng th√°i: Idle")
local bossHPBar = FarmBossTab:CreateSlider({ Name = "‚ù§Ô∏è Boss HP", Range = {0,100}, Increment = 1, Suffix = "%", CurrentValue = 0, Callback = function() end })
local bossHPLabel = FarmBossTab:CreateLabel("HP: 0 / 0")
local bossHPState = FarmBossTab:CreateLabel("‚¨õ Boss HP: Kh√¥ng t√¨m th·∫•y")

-- ===== Farm Money (Anti AFK improved) =====
FarmMoneyTab:CreateToggle({
    Name = "üí§ Anti AFK",
    CurrentValue = false,
    Callback = function(state)
        antiAFKRunning = state
        if antiAFKRunning then
            if antiAFKThread then task.cancel(antiAFKThread) antiAFKThread = nil end
            antiAFKThread = task.spawn(function()
                while antiAFKRunning do
                    pcall(function()
                        VirtualUser:Button2Down(Vector2.new(0,0), workspaceRef.CurrentCamera.CFrame)
                        task.wait(0.1)
                        VirtualUser:Button2Up(Vector2.new(0,0), workspaceRef.CurrentCamera.CFrame)
                    end)
                    task.wait(30) -- every 30s
                end
            end)
            Rayfield:Notify({ Title = "Anti AFK", Content = "ƒê√£ b·∫≠t Anti AFK", Duration = 2 })
        else
            if antiAFKThread then task.cancel(antiAFKThread) antiAFKThread = nil end
            Rayfield:Notify({ Title = "Anti AFK", Content = "ƒê√£ t·∫Øt Anti AFK", Duration = 2 })
        end
    end
})

-- ===== Fix Lag Tab (single-button, keep players & tools) =====
FixLagTab:CreateButton({
    Name = "üöÄ Fix Lag T·ªëi ∆Øu Nh·∫•t",
    Callback = function()
        -- Loop workspace and optimize environment but keep characters & their tools intact
        for _, v in pairs(workspaceRef:GetDescendants()) do
            -- skip anything under player characters to avoid touching players & their tools
            if v:IsDescendantOf(game.Players.LocalPlayer.Character) then
                -- do nothing to local player's own character
            else
                -- also skip other players' characters completely (do not remove or modify)
                local isOtherPlayerChar = false
                for _, pl in pairs(Players:GetPlayers()) do
                    if pl.Character and v:IsDescendantOf(pl.Character) then
                        isOtherPlayerChar = true
                        break
                    end
                end
                if isOtherPlayerChar then
                    -- keep other players & their tools untouched
                else
                    -- environment optimization
                    if v:IsA("Part") or v:IsA("MeshPart") or v:IsA("UnionOperation") or v:IsA("BasePart") then
                        pcall(function()
                            v.Material = Enum.Material.Plastic
                            v.Reflectance = 0
                            if pcall(function() v.CastShadow = false end) then end
                        end)
                    elseif v:IsA("Decal") or v:IsA("Texture") then
                        pcall(function() v:Destroy() end)
                    elseif v:IsA("ParticleEmitter") or v:IsA("Trail") or v:IsA("Smoke") or v:IsA("Fire") then
                        pcall(function() v.Enabled = false end)
                    elseif v:IsA("PointLight") or v:IsA("SpotLight") or v:IsA("SurfaceLight") then
                        pcall(function() v.Enabled = false end)
                    end

                    -- optional: remove common heavy decorative objects by name (grass/tree/leaf/plant/bush/rock)
                    local okName, lname = pcall(function() return tostring(v.Name):lower() end)
                    if okName and lname then
                        if lname:find("grass") or lname:find("tree") or lname:find("leaf")
                        or lname:find("plant") or lname:find("bush") or lname:find("rock") then
                            pcall(function() v:Destroy() end)
                        end
                    end
                end
            end
        end

        -- Clean up Lighting except Sky (keep sky for visual reference)
        local Lighting = game:GetService("Lighting")
        for _, child in pairs(Lighting:GetChildren()) do
            if not child:IsA("Sky") then
                pcall(function() child:Destroy() end)
            end
        end

        -- Set rendering & FPS cap (high cap as requested)
        pcall(function() settings().Rendering.QualityLevel = Enum.QualityLevel.Level01 end)
        pcall(function() setfpscap(999) end)

        Rayfield:Notify({
            Title = "‚úÖ Fix Lag",
            Content = "ƒê√£ t·ªëi ∆∞u game (FPS cap 999). Ng∆∞·ªùi ch∆°i & v≈© kh√≠ ƒë∆∞·ª£c gi·ªØ nguy√™n.",
            Duration = 4
        })
    end
})

-- ===== PvP Tab (replaced with fixed implementation) =====

-- Auto Attack (spam continuously; no auto-equip)
PvPTab:CreateToggle({
    Name = "‚ö° Auto Attack",
    CurrentValue = false,
    Callback = function(state)
        autoAttack = state
        if autoAttack then
            task.spawn(function()
                while autoAttack do
                    local char = player.Character
                    if char then
                        local tool = char:FindFirstChildOfClass("Tool")
                        if tool then
                            pcall(function() tool:Activate() end)
                        end
                    end
                    task.wait(0.08) -- spam rate
                end
            end)
        end
    end
})

-- CFrame Speed toggle + input (safe CFrame Walk)
PvPTab:CreateToggle({
    Name = "üöÄ CFrame Walk",
    CurrentValue = false,
    Callback = function(state)
        cframeSpeedEnabled = state
        CFWalkEnabled = state
        -- loop handled in main Heartbeat below
    end
})
PvPTab:CreateInput({
    Name = "üöÄ T·ªëc ƒë·ªô CFrame",
    PlaceholderText = "30",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt) local n = tonumber(txt) if n and n > 0 then cframeSpeedValue = n end end
})

-- Fly (WASD + Space/Shift) - creates BodyVelocity on HRP
PvPTab:CreateToggle({
    Name = "üïä Fly (WASD+Space/Shift)",
    CurrentValue = false,
    Callback = function(state)
        flyEnabled = state
        if flyEnabled then
            local char = player.Character
            if not char then
                player.CharacterAdded:Wait()
                char = player.Character
            end
            local hrp = char and char:FindFirstChild("HumanoidRootPart")
            if hrp then
                if hrp:FindFirstChild("PvPFlyBV") then
                    hrp.PvPFlyBV:Destroy()
                end
                local bv = Instance.new("BodyVelocity")
                bv.Name = "PvPFlyBV"
                bv.MaxForce = Vector3.new(1e5,1e5,1e5)
                bv.Velocity = Vector3.new(0,0,0)
                bv.Parent = hrp
                flyBV = bv
                task.spawn(function()
                    while flyEnabled and bv.Parent do
                        local dir = Vector3.new(0,0,0)
                        local cam = workspace.CurrentCamera
                        if cam then
                            if UserInputService:IsKeyDown(Enum.KeyCode.W) then dir = dir + cam.CFrame.LookVector end
                            if UserInputService:IsKeyDown(Enum.KeyCode.S) then dir = dir - cam.CFrame.LookVector end
                            if UserInputService:IsKeyDown(Enum.KeyCode.A) then dir = dir - cam.CFrame.RightVector end
                            if UserInputService:IsKeyDown(Enum.KeyCode.D) then dir = dir + cam.CFrame.RightVector end
                        end
                        if UserInputService:IsKeyDown(Enum.KeyCode.Space) then dir = dir + Vector3.new(0,1,0) end
                        if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then dir = dir - Vector3.new(0,1,0) end
                        if dir.Magnitude > 0 then
                            bv.Velocity = dir.Unit * flySpeed
                        else
                            bv.Velocity = Vector3.new(0,0,0)
                        end
                        task.wait()
                    end
                    if bv and bv.Parent then pcall(function() bv:Destroy() end) end
                end)
            end
        else
            -- disable: remove BV if exists
            local char = player.Character
            if char and char:FindFirstChild("HumanoidRootPart") then
                local hrp = char.HumanoidRootPart
                if hrp:FindFirstChild("PvPFlyBV") then pcall(function() hrp.PvPFlyBV:Destroy() end) end
            end
        end
    end
})
PvPTab:CreateInput({
    Name = "‚ö° T·ªëc ƒë·ªô Fly",
    PlaceholderText = "50",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt) local n = tonumber(txt) if n and n > 0 then flySpeed = n end end
})

-- Spin (rotate around own Y axis)
PvPTab:CreateInput({
    Name = "‚ö° Spin Speed",
    PlaceholderText = "5",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt) local n = tonumber(txt) if n then spinSpeed = n end end
})
PvPTab:CreateToggle({
    Name = "üîÑ Spin",
    CurrentValue = false,
    Callback = function(state)
        spinEnabled = state
        -- spin loop handled in Heartbeat below
    end
})

-- Orbix (orbit around nearest player)
PvPTab:CreateInput({
    Name = "‚ö° Orbix Speed",
    PlaceholderText = "5",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt) local n = tonumber(txt) if n and n > 0 then orbixSpeed = n end end
})
PvPTab:CreateInput({
    Name = "üìè Orbix Distance",
    PlaceholderText = "10",
    RemoveTextAfterFocusLost = false,
    Callback = function(txt) local n = tonumber(txt) if n and n > 0 then orbixRadius = n end end
})
PvPTab:CreateToggle({
    Name = "üåÄ Orbix",
    CurrentValue = false,
    Callback = function(state)
        orbixEnabled = state
        -- orbix loop handled in Heartbeat below
    end
})

-- ===== Main Loop(s) =====
local lastAttack = 0
local orbitAngle = 0
local bossScanAccumulator = 0
local hpAccumulator = 0

-- Heartbeat loop for multiple responsibilities (includes PvP loops to ensure proper frame timing)
RunService.Heartbeat:Connect(function(dt)
    -- PvP: Auto Attack handled by separate task spawn on toggle,
    -- but keep here as fallback: ensure tool activation respects timing (not necessary to change)

    -- CFrame Walk (safe): move by Humanoid.MoveDirection but clamp Y to avoid falling through ground
    if CFWalkEnabled and player and player.Character then
        local char = player.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        local hum = char and char:FindFirstChildOfClass("Humanoid")
        if hrp and hum then
            local moveDir = hum.MoveDirection -- normalized in local space (based on input + camera)
            if moveDir.Magnitude > 0 then
                local desired = hrp.Position + (moveDir.Unit * (cframeSpeedValue * dt))
                -- maintain a safe Y: keep at least 2.5 studs above terrain/floor by clamping relative to current Y
                -- to avoid sinking, only adjust if desired.Y lowered too much
                local minY = hrp.Position.Y - 1.0 -- allow small vertical movement but prevent large drops
                if desired.Y < minY then desired = Vector3.new(desired.X, minY, desired.Z) end
                -- apply CFrame move while preserving look direction
                local lookVec = hrp.CFrame.LookVector
                hrp.CFrame = CFrame.new(desired, desired + lookVec)
            end
        end
    end

    -- Spin (rotate around self)
    if spinEnabled and player and player.Character then
        local char = player.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if hrp then
            -- rotate by spinSpeed degrees per heartbeat (scaled by dt)
            local ang = math.rad((spinSpeed or 5) * dt * 60) -- keep similar feel to original
            hrp.CFrame = hrp.CFrame * CFrame.Angles(0, ang, 0)
        end
    end

    -- Orbix (orbit around nearest player)
    if orbixEnabled and player and player.Character then
        local char = player.Character
        local hrp = char and char:FindFirstChild("HumanoidRootPart")
        if hrp then
            local nearest, dist = nil, math.huge
            for _,plr in pairs(Players:GetPlayers()) do
                if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChildOfClass("Humanoid") and plr.Character:FindFirstChildOfClass("Humanoid").Health > 0 then
                    local d = (plr.Character.HumanoidRootPart.Position - hrp.Position).Magnitude
                    if d < dist then dist, nearest = d, plr end
                end
            end
            if nearest and nearest.Character and nearest.Character:FindFirstChild("HumanoidRootPart") then
                orbitAngle = orbitAngle + (orbixSpeed * dt)
                local tpos = nearest.Character.HumanoidRootPart.Position
                local radius = orbixRadius or 10
                local offset = Vector3.new(math.cos(orbitAngle) * radius, 0, math.sin(orbitAngle) * radius)
                -- place around target at roughly target.Y + 2 to stay at ground level of target
                local desiredPos = Vector3.new(tpos.X + offset.X, tpos.Y + 2, tpos.Z + offset.Z)
                hrp.CFrame = CFrame.new(desiredPos, tpos)
            end
        end
    end

    -- refresh boss cache occasionally (unchanged)
    bossScanAccumulator = bossScanAccumulator + dt
    if bossScanAccumulator >= cacheInterval then
        bossScanAccumulator = 0
        refreshBossCache()
    end

    -- HP accumulator etc (unchanged)
    hpAccumulator = hpAccumulator + dt

    local char = player.Character
    local hum = char and char:FindFirstChildOfClass("Humanoid")
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    local boss = cachedBoss or refreshBossCache()

    -- Boss HP UI update (kept from original)
    if boss and boss:FindFirstChildOfClass("Humanoid") then
        local bh = boss:FindFirstChildOfClass("Humanoid")
        local targetPercent = 0
        if bh and bh.MaxHealth and bh.MaxHealth > 0 then
            targetPercent = math.clamp((bh.Health / bh.MaxHealth) * 100, 0, 100)
        end
        if math.abs(targetPercent - currentHPPercent) > 0.5 then
            task.spawn(function() tweenHPTo(targetPercent, bossHPBar) end)
        end
        bossHPLabel:Set("HP: " .. math.floor(bh.Health or 0) .. " / " .. math.floor(bh.MaxHealth or 0))
        if targetPercent > 70 then
            bossHPState:Set("üü© Boss HP: T·ªët")
        elseif targetPercent > 30 then
            bossHPState:Set("üü® Boss HP: Trung b√¨nh")
        else
            bossHPState:Set("üü• Boss HP: Nguy hi·ªÉm")
        end
    else
        if currentHPPercent ~= 0 then task.spawn(function() tweenHPTo(0, bossHPBar) end) end
        bossHPLabel:Set("HP: 0 / 0")
        bossHPState:Set("‚¨õ Boss HP: Kh√¥ng t√¨m th·∫•y")
    end

    -- Auto HP check (every 0.25s) - SIMPLE: exact "bƒÉng g·∫°c"
    if hpAccumulator >= 0.25 then
        hpAccumulator = 0
        if autoHP and hum and not healing then
            local hpPercent = (hum.Health / (hum.MaxHealth > 0 and hum.MaxHealth or 1)) * 100
            if hpPercent <= hpThreshold then
                task.spawn(function()
                    healing = true
                    statusLabel:Set("Tr·∫°ng th√°i: Ki·ªÉm tra bƒÉng g·∫°c...")
                    -- Simple: exact match "bƒÉng g·∫°c" in char or backpack (case-insensitive)
                    local bandage, where = findExactTool("bƒÉng g·∫°c")
                    if not bandage then
                        -- also try variant without diacritics "bang gac" and plain "bandage"
                        bandage, where = findExactTool("bang gac")
                    end
                    if not bandage then
                        bandage, where = findExactTool("bandage")
                    end
                    -- if in backpack, equip it
                    if bandage and where == "backpack" then
                        pcall(function()
                            local humLocal = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
                            if humLocal then
                                humLocal:EquipTool(bandage)
                            else
                                bandage.Parent = player.Character
                            end
                        end)
                        task.wait(0.12)
                        bandage, where = findExactTool("bƒÉng g·∫°c")
                    end
                    if bandage then
                        statusLabel:Set("Tr·∫°ng th√°i: ƒêang d√πng "..tostring(bandage.Name))
                        pcall(function() safeActivate(bandage) end)
                        task.wait(1.4)
                        statusLabel:Set("Tr·∫°ng th√°i: Idle")
                        -- re-equip chosen weapon
                        if selectedWeaponName and player and player.Backpack and player.Character then
                            pcall(function() ensureEquipped(selectedWeaponName, 0.8) end)
                        end
                    else
                        statusLabel:Set("Tr·∫°ng th√°i: Kh√¥ng t√¨m th·∫•y bƒÉng g·∫°c")
                        task.wait(0.8)
                    end
                    healing = false
                end)
            end
        end
    end

    -- Auto Attack for farm boss (unchanged)
    if autoEquipAndAttack and hum and not healing and selectedWeaponName then
        if tick() - lastAttack >= (attackInterval or 0.12) then
            lastAttack = tick()
            local tool = ensureEquipped(selectedWeaponName, 0.8)
            if tool then
                local ok = pcall(function() safeActivate(tool) end)
                if ok then
                    statusLabel:Set("Tr·∫°ng th√°i: T·∫•n c√¥ng b·∫±ng '"..tostring(tool.Name).."'")
                else
                    statusLabel:Set("Tr·∫°ng th√°i: Kh√¥ng th·ªÉ t·∫•n c√¥ng")
                end
            else
                statusLabel:Set("Tr·∫°ng th√°i: Kh√¥ng t√¨m th·∫•y v≈© kh√≠ '"..tostring(selectedWeaponName).."'")
            end
        end
    end

    -- Orbit (delta-based) around boss (farm boss feature) (unchanged)
    if orbitEnabled and hrp and boss and boss:FindFirstChild("HumanoidRootPart") then
        orbitAngle = orbitAngle + dt * (orbitSpeed or 2)
        local bossPos = boss.HumanoidRootPart.Position
        local newPos = bossPos + Vector3.new(math.cos(orbitAngle) * orbitDistance, 0, math.sin(orbitAngle) * orbitDistance)
        pcall(function() hrp.CFrame = CFrame.new(newPos, bossPos) end)
    end

    -- (Auto Loot removed)
end)

-- Re-equip when boss spawns (listen for descendant added)
workspaceRef.DescendantAdded:Connect(function(desc)
    if desc and desc:IsA("Model") and desc.Name == bossName and autoEquipAndAttack and selectedWeaponName then
        task.wait(0.2)
        pcall(function() ensureEquipped(selectedWeaponName, 1.0) end)
    end
end)

-- Try load saved configuration (Rayfield)
pcall(function() Rayfield:LoadConfiguration() end)

print("[CDVN BY RONDZ] Script loaded. Press V to toggle UI.")
